{"ast":null,"code":"import*as ActionTypes from'./ActionTypes';import{baseUrl}from'../shared/baseUrl';export var fetchReports=function fetchReports(){return function(dispatch){dispatch(reportsLoading());return fetch(baseUrl+'api/reports').then(function(response){if(response.ok){return response;}else{var error=new Error(\"Error \".concat(response.status,\": \").concat(response.statusText));error.response=response;throw error;}},function(error){var errMess=new Error(error.message);throw errMess;}).then(function(response){return response.json();}).then(function(reports){return dispatch(addReports(reports));}).catch(function(error){return dispatch(reportsFailed(error.message));});};};export var addReports=function addReports(reports){return{type:ActionTypes.ADD_REPORTS,payload:reports};};export var reportsLoading=function reportsLoading(){return{type:ActionTypes.REPORTS_LOADING};};export var reportsFailed=function reportsFailed(errMess){return{type:ActionTypes.REPORTS_FAILED,payload:errMess};};export var postFeedback=function postFeedback(feedback){return function(){return fetch(baseUrl+'api/feedback',{method:'POST',body:JSON.stringify(feedback),headers:{'Content-Type':'application/json'}}).then(function(response){if(response.ok){return response;}else{var error=new Error(\"Error \".concat(response.status,\": \").concat(response.statusText));error.response=response;throw error;}},function(error){throw error;}).then(function(response){return response.json();}).then(function(response){console.log('Feedback:',response);alert('Thank you for your feedback!\\n'+JSON.stringify(response));}).catch(function(error){console.log('Feedback:',error.message);alert('Your feedback could not be posted\\nError: '+error.message);});};};","map":{"version":3,"sources":["/Users/nickahlers/Desktop/WeatherReact-Express-MongoDB/stormbreaker-aws/client/src/redux/ActionCreators.js"],"names":["ActionTypes","baseUrl","fetchReports","dispatch","reportsLoading","fetch","then","response","ok","error","Error","status","statusText","errMess","message","json","reports","addReports","catch","reportsFailed","type","ADD_REPORTS","payload","REPORTS_LOADING","REPORTS_FAILED","postFeedback","feedback","method","body","JSON","stringify","headers","console","log","alert"],"mappings":"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","sourcesContent":["import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl';\n\nexport const fetchReports = () => dispatch => {\n    dispatch(reportsLoading());\n\n    return fetch(baseUrl + 'api/reports')\n        .then(response => {\n                if (response.ok) {\n                    return response;\n                } else {\n                    const error = new Error(`Error ${response.status}: ${response.statusText}`);\n                    error.response = response;\n                    throw error;\n                }\n            },\n            error => {\n                const errMess = new Error(error.message);\n                throw errMess;\n            }\n        )\n        .then(response => response.json())\n        .then(reports => dispatch(addReports(reports)))\n        .catch(error => dispatch(reportsFailed(error.message)));\n};\n\nexport const addReports = reports => ({\n    type: ActionTypes.ADD_REPORTS,\n    payload: reports\n});\n\nexport const reportsLoading = () => ({\n    type: ActionTypes.REPORTS_LOADING\n});\n\nexport const reportsFailed = errMess => ({\n    type: ActionTypes.REPORTS_FAILED,\n    payload: errMess\n});\n\nexport const postFeedback = feedback => () => {\n    return fetch(baseUrl + 'api/feedback', {\n        method: 'POST',\n        body: JSON.stringify(feedback),\n        headers: {\n            'Content-Type': 'application/json'\n        },\n    })\n    .then(response => {\n            if (response.ok) {\n                return response;\n            } else {\n                const error = new Error(`Error ${response.status}: ${response.statusText}`);\n                error.response = response;\n                throw error;\n            }\n        },\n        error => { throw error; }             \n    )\n    .then(response => response.json())\n    .then(response => {\n        console.log('Feedback:', response);\n        alert('Thank you for your feedback!\\n' + JSON.stringify(response));\n    })\n    .catch(error => {\n        console.log('Feedback:', error.message);\n        alert('Your feedback could not be posted\\nError: ' + error.message);\n    });\n};"]},"metadata":{},"sourceType":"module"}